{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { API } from \"helper/CONST\";\nimport React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\"; // create new react context and export it\n\nconst HelperContext = /*#__PURE__*/React.createContext();\nexport default HelperContext;\nexport const HelperContextProvider = ({\n  children\n}) => {\n  // create new states\n  const {\n    0: categories,\n    1: setCategories\n  } = useState({\n    product: [],\n    service: [],\n    all: []\n  });\n  const {\n    0: mainLoader,\n    1: setMainLoader\n  } = useState(false);\n  const {\n    0: ordersItems,\n    1: setOrdersItems\n  } = useState([]);\n  const {\n    0: newOrdersIndi,\n    1: setNewOrdersIndi\n  } = useState(false);\n\n  const getCategories = async (values = []) => {\n    try {\n      values = await Axios({\n        baseURL: API,\n        url: \"/api/categories/getAll\",\n        method: \"GET\",\n        params: {\n          nested: \"1\"\n        }\n      });\n      console.log(values);\n      let all = [],\n          product = [],\n          service = [],\n          names = [],\n          subs = [];\n      let cat = values.data.data.map(c => {\n        var _c$sub_categories;\n\n        if (c.type === \"product\" && c.parent_id) product.push(c);else if (c.type === \"service\" && c.parent_id) service.push(c);\n        if (((_c$sub_categories = c.sub_categories) === null || _c$sub_categories === void 0 ? void 0 : _c$sub_categories.length) >= 1) subs.push(...c.sub_categories);\n        all.push(c);\n        names[c.id] = c.name;\n      });\n      setCategories({\n        all,\n        product,\n        service,\n        subs,\n        names\n      });\n      return {\n        all,\n        product,\n        service,\n        subs,\n        names\n      };\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const getOrders = async () => {\n    try {\n      const res = await Axios({\n        baseURL: API,\n        url: \"/api/orders/get\",\n        method: \"GET\"\n      });\n      let values = res.data.data;\n      let newValues = [];\n      let oldVals = localStorage.getItem(\"ordersIDs\") ? JSON.parse(localStorage.getItem(\"ordersIDs\")) : [];\n      values.map(order => {\n        var hasNullableProducts = false;\n        order.Order_Products.map(product => {\n          if (product.Product == null) hasNullableProducts = true;\n        });\n\n        if (hasNullableProducts == false && order.User != null) {\n          if (!oldVals.includes(order.id)) {\n            order.new = true;\n            oldVals.push(order.id);\n          }\n\n          newValues.push(order);\n        }\n      });\n      if (newValues[0].new) setNewOrdersIndi(true);\n      setOrdersItems([...newValues]);\n      localStorage.setItem(\"ordersIDs\", JSON.stringify(oldVals));\n    } catch (error) {}\n  };\n\n  const initailize = async () => {\n    setMainLoader(true);\n\n    try {\n      await getCategories();\n      await getOrders();\n      setMainLoader(false);\n    } catch (error) {\n      console.log(error.response);\n    }\n  };\n\n  useEffect(() => {\n    initailize();\n  }, []);\n  return (\n    /*#__PURE__*/\n    // return provider of the context with value object to be used wih all children components\n    _jsx(HelperContext.Provider, {\n      value: {\n        categories,\n        setCategories,\n        getCategories,\n        ordersItems,\n        setOrdersItems,\n        newOrdersIndi,\n        setNewOrdersIndi,\n        mainLoader\n      },\n      children: children\n    })\n  );\n};","map":null,"metadata":{},"sourceType":"module"}